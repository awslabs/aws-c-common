# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions and
# limitations under the License.

SHELL=/bin/bash

default: report

# if Makefile.local exists, use it. This provides a way to override the defaults
sinclude Makefile.local

################################################################
# Define some constants that are hard to reference otherwise
SPACE :=$() $()
COMMA :=,

################################################################
# Setup paths to binaries
# By default, use the version on your path; this can be overriden to select particular
# versions of the tools. /usr/bin/goto-analyzer or ${HOME}/sw/goto-analyzer etc
GOTO_ANALYZER ?= goto-analyzer
GOTO_CC ?= goto-cc
GOTO_INSTRUMENT ?= goto-instrument
VIEWER ?= cbmc-viewer

################################################################
# Define locations and binaries
ABSTRACTIONS ?= ""

################################################################
# Default CBMC flags
CBMC_VERBOSITY ?= ""
CBMCFLAGS += --bounds-check
CBMCFLAGS += --div-by-zero-check
CBMCFLAGS += --float-overflow-check
CBMCFLAGS += --nan-check
CBMCFLAGS += --pointer-check
CBMCFLAGS += --pointer-overflow-check
CBMCFLAGS += --signed-overflow-check
CBMCFLAGS += --undefined-shift-check
CBMCFLAGS += --unsigned-overflow-check
CBMCFLAGS += --unwind 1
CBMCFLAGS += --unwinding-assertions

################################################################
# Preprocess the unwindset
ifneq ($(UNWINDSET),)
CBMC_UNWINDSET := --unwindset $(subst $(SPACE),$(COMMA),$(strip $(UNWINDSET)))
endif
CBMCFLAGS += $(CBMC_UNWINDSET)

################################################################
# Set C compiler defines
CBMC_OBJECT_BITS ?= 8
CBMCFLAGS +=  --object-bits $(CBMC_OBJECT_BITS)
DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)
DEFINES += -DCBMC=1

################################################################
# Setup directory aliases
SRCDIR ?= $(abspath ../../..)
HELPERDIR ?= $(SRCDIR)/.cbmc-batch

################################################################
# Setup include directory order
# HELPERDIR must go before any other includes to override default
# implementations by stubs
INC += -I$(HELPERDIR)/include/
INC += -I$(SRCDIR)/include/

################################################################
# Temporarily disable UNWIND_GOTO, SIMPLIFY until the feature is
# stable
UNWIND_GOTO ?= 0
SIMPLIFY ?= 0

################################################################
# Enables costly checks (e.g. ones that contain loops)
# Don't execute deep checks by default
AWS_DEEP_CHECKS ?= 0
DEFINES += -DAWS_DEEP_CHECKS=$(AWS_DEEP_CHECKS)

################################################################
# We always override allocator functions with our own allocator
# Removing the function from the goto program helps CBMC's
# function pointer analysis.
REMOVE_FUNCTION_BODY += --remove-function-body aws_default_allocator
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_allocate
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_copy_description
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_deallocate
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_preferred_size
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_reallocate
REMOVE_FUNCTION_BODY += --remove-function-body s_default_calloc
REMOVE_FUNCTION_BODY += --remove-function-body s_default_free
REMOVE_FUNCTION_BODY += --remove-function-body s_default_malloc
REMOVE_FUNCTION_BODY += --remove-function-body s_default_realloc

################################################################
# We override abort() to be assert(0), as it is not caught by
# CBMC as a violation
ABSTRACTIONS += $(HELPERDIR)/stubs/abort_override_assert_false.c
REMOVE_FUNCTION_BODY += --remove-function-body abort
################################################################

REMOVE_FUNCTION_BODY += $(ADDITIONAL_REMOVE_FUNCTION_BODY)
DEPENDENT_GOTOS = $(patsubst %.c,%.goto,$(DEPENDENCIES))

################################################################
# Other libraries that use this Makefile template may wish to do
# actual work here
setup_dependencies:
	echo "Setting up dependencies"

# Here, whenever there is a change in any of ANSI-C source
# dependency files, make will take action. However, to make
# sure changes in the headers files will also trigger make,
# the user must run make clean first.
$(ENTRY)0.goto: setup_dependencies $(ENTRY).c $(DEPENDENT_GOTOS)
	$(GOTO_CC) $(ENTRY).c $(DEPENDENT_GOTOS) \
	  --export-function-local-symbols $(CBMC_VERBOSITY) \
	  --function $(ENTRY) $(DEPENDENT_GOTOS) $(INC) $(DEFINES) -o $@ \
	  2>&1 | tee $(ENTRY)1.log ; exit $${PIPESTATUS[0]}

# Removes specified function bodies. This allows us to replace
# function definitions with ABSTRACTIONS.
$(ENTRY)1.goto: $(ENTRY)0.goto
ifeq ($(REMOVE_FUNCTION_BODY), "")
	cp $< $@
	echo "Not removing function bodies" | tee $(ENTRY)1.log ; exit $${PIPESTATUS[0]}
else
	$(GOTO_INSTRUMENT) $(REMOVE_FUNCTION_BODY) $< $@ \
		2>&1 | tee $(ENTRY)2.log ; exit $${PIPESTATUS[0]}
endif

# ABSTRACTIONS is a list of function stubs to use. If a function body
# is missing and is not abstracted, then it returnes a non
# deterministic value.
$(ENTRY)2.goto: $(ENTRY)1.goto
ifeq ($(ABSTRACTIONS), "")
	cp $< $@
	echo "Not implementing abstractions" | tee $(ENTRY)2.log ; exit $${PIPESTATUS[0]}
else
	$(GOTO_CC) --function $(ENTRY) $(ABSTRACTIONS) $< $(INC) $(DEFINES) -o $@ \
		2>&1 | tee $(ENTRY)2.log ; exit $${PIPESTATUS[0]}
endif


## Temporarily skipped steps

# Simplify and constant propagation may benefit from unwinding first
$(ENTRY)3.goto: $(ENTRY)2.goto
ifeq ($(UNWIND_GOTO), 1)
	$(GOTO_INSTRUMENT) $(UNWINDING) $< $@ \
		2>&1 | tee $(ENTRY)3.log ; exit $${PIPESTATUS[0]}
else
	cp $< $@
	echo "Not unwinding goto program" | tee $(ENTRY)3.log ; exit $${PIPESTATUS[0]}
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(ENTRY)4.goto: $(ENTRY)3.goto
ifeq ($(SIMPLIFY), 1)
	$(GOTO_INSTRUMENT) --generate-function-body '.*' $< $@ \
		2>&1 | tee $(ENTRY)4.log ; exit $${PIPESTATUS[0]}
else
	cp $< $@
	echo "Not generating-function-bodies in goto program" | tee $(ENTRY)4.log ; exit $${PIPESTATUS[0]}
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(ENTRY)5.goto: $(ENTRY)4.goto
ifeq ($(SIMPLIFY), 1)
	$(GOTO_ANALYZER) --simplify $@ $< \
		2>&1 | tee $(ENTRY)5.log ; exit $${PIPESTATUS[0]}
else
	cp $< $@
	echo "Not simplfying goto program" | tee $(ENTRY)5.log ; exit $${PIPESTATUS[0]}
endif

# Simplify the goto program by removing any unused function bodies
$(ENTRY)6.goto: $(ENTRY)5.goto
	$(GOTO_INSTRUMENT) --drop-unused-functions $< $@ \
		2>&1 | tee $(ENTRY)6.log ; exit $${PIPESTATUS[0]}

# Simplify the goto program by slicing away initializations of unused
# global variables
$(ENTRY)7.goto: $(ENTRY)6.goto
	$(GOTO_INSTRUMENT) --slice-global-inits $< $@ \
		2>&1 | tee $(ENTRY)7.log ; exit $${PIPESTATUS[0]}

$(ENTRY).goto: $(ENTRY)7.goto
	cp $< $@

# Catch-all used for building goto-binaries of the individual
# dependencies, which are then linked in the $(ENTRY)0.goto rule above
%.goto: %.c
	$(GOTO_CC) -c $< --export-function-local-symbols $(CBMC_VERBOSITY) \
	  $(INC) $(DEFINES) -o $@ \
	  2>&1 | tee $(dir $<)/$(notdir $<).log ; exit $${PIPESTATUS[0]}

goto: $(ENTRY).goto

cbmc.log: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --trace $< 2>&1 | tee $@

property.xml: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --show-properties --xml-ui $< 2>&1 > $@

coverage.xml: $(ENTRY).goto
	cbmc $(filter-out --unwinding-assertions,$(CBMCFLAGS)) --cover location --xml-ui $< 2>&1 > $@

cbmc: cbmc.log

property: property.xml

coverage: coverage.xml

report: cbmc.log property.xml coverage.xml
	$(VIEWER) \
	--block coverage.xml \
	--goto $(ENTRY).goto \
	--htmldir html \
	--property property.xml \
	--result cbmc.log \
	--srcdir $(SRCDIR) \
	--srcexclude "(./verification|./tests|./tools|./lib/third_party)"

clean:
	$(RM) *.goto
	$(RM) $(DEPENDENT_GOTOS)
	$(RM) *.log
	$(RM) cbmc.log property.xml coverage.xml TAGS
	$(RM) *~ \#*

veryclean: clean
	$(RM) -r html

.PHONY: setup_dependencies cbmc property coverage report clean veryclean

include $(HELPERDIR)/jobs/Makefile.cbmc_batch
