# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions and
# limitations under the License.

SHELL=/bin/bash

default: report

# if Makefile.local exists, use it. This provides a way to override the defaults
sinclude Makefile.local

################################################################
# Define some constants that are hard to reference otherwise
SPACE :=$() $()
COMMA :=,

################################################################
# Define locations and binaries
ABSTRACTIONS ?= ""
BASEDIR ?= $(abspath ../../../..)
BATCH ?= cbmc-batch

CBMCFLAGS += --bounds-check
CBMCFLAGS += --div-by-zero-check
CBMCFLAGS += --float-overflow-check
CBMCFLAGS += --nan-check
CBMCFLAGS += --pointer-check
CBMCFLAGS += --pointer-overflow-check
CBMCFLAGS += --signed-overflow-check
CBMCFLAGS += --undefined-shift-check
CBMCFLAGS += --unsigned-overflow-check
CBMCFLAGS += --unwind 1
CBMCFLAGS += --unwinding-assertions
CBMCFLAGS += $(CBMC_UNWINDSET)

GOTO_ANALYZER ?= goto-analyzer
GOTO_CC ?= goto-cc
GOTO_INSTRUMENT ?= goto-instrument
HELPERDIR ?= $(SRCDIR)/.cbmc-batch

INC += -I$(HELPERDIR)/include/
INC += -I$(SRCDIR)/include/

SIMPLIFY ?= 0
SRCDIR ?= $(abspath ../../..)
UNWIND ?= 0
VIEWER ?= cbmc-viewer
CBMC_VERBOSITY ?= ""

################################################################
# Preprocess the unwindset

ifneq ($(UNWINDSET),)
CBMC_UNWINDSET := --unwindset $(subst $(SPACE),$(COMMA),$(strip $(UNWINDSET)))
endif

################################################################
# Set defines that will be used by the projects
CBMC_OBJECT_BITS ?= 8
CBMCFLAGS +=  --object-bits $(CBMC_OBJECT_BITS)
DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)
DEFINES += -DCBMC=1

################################################################
# We always override allocator functions with our own allocator
# Removing the function from the goto program helps CBMC's
# function pointer analysis.
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body aws_default_allocator
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_allocate
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_copy_description
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_deallocate
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_preferred_size
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_reallocate
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_default_calloc
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_default_free
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_default_malloc
DEFAULT_REMOVE_FUNCTION_BODY += --remove-function-body s_default_realloc
################################################################

REMOVE_FUNCTION_BODY ?= $(DEFAULT_REMOVE_FUNCTION_BODY)
REMOVE_FUNCTION_BODY += $(ADDITIONAL_REMOVE_FUNCTION_BODY)
DEPENDENT_GOTOS = $(patsubst %.c,%.goto,$(DEPENDENCIES))

# Here, whenever there is a change in any of ANSI-C source
# dependency files, make will take action. However, to make
# sure changes in the headers files will also trigger make,
# the user must run make clean first.
$(ENTRY)0.goto: $(ENTRY).c $(DEPENDENT_GOTOS)
	$(GOTO_CC) $< --export-function-local-symbols $(CBMC_VERBOSITY) \
	  --function $(ENTRY) $(DEPENDENT_GOTOS) $(INC) $(DEFINES) -o $@ \
	  2>&1 | tee $(ENTRY)1.log

$(ENTRY)1.goto: $(ENTRY)0.goto
ifeq ($(REMOVE_FUNCTION_BODY), "")
	cp $< $@
	echo "Not removing function bodies" | tee $(ENTRY)1.log
else
	$(GOTO_INSTRUMENT) $(REMOVE_FUNCTION_BODY) $< $@ \
		2>&1 | tee $(ENTRY)2.log
endif

$(ENTRY)2.goto: $(ENTRY)1.goto
ifeq ($(ABSTRACTIONS), "")
	cp $< $@
	echo "Not implementing abstractions" | tee $(ENTRY)2.log
else
	$(GOTO_CC) --function $(ENTRY) $(ABSTRACTIONS) $< $(INC) $(DEFINES) -o $@ \
		2>&1 | tee $(ENTRY)2.log
endif

# Simplify and constant propagation may benefit from unwinding first
$(ENTRY)3.goto: $(ENTRY)2.goto
ifeq ($(UNWIND_GOTO), 1)
	$(GOTO_INSTRUMENT) $(UNWINDING) $< $@ \
		2>&1 | tee $(ENTRY)3.log
else
	cp $< $@
	echo "Not unwinding goto program" | tee $(ENTRY)3.log
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(ENTRY)4.goto: $(ENTRY)3.goto
ifeq ($(SIMPLIFY), 1)
	$(GOTO_INSTRUMENT) --generate-function-body '.*' $< $@ \
		2>&1 | tee $(ENTRY)4.log
else
	cp $< $@
	echo "Not generating-function-bodies in goto program" | tee $(ENTRY)4.log
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(ENTRY)5.goto: $(ENTRY)4.goto
ifeq ($(SIMPLIFY), 1)
	$(GOTO_ANALYZER) --simplify $@ $< \
		2>&1 | tee $(ENTRY)5.log
else
	cp $< $@
	echo "Not simplfying goto program" | tee $(ENTRY)5.log
endif

$(ENTRY)6.goto: $(ENTRY)5.goto
	$(GOTO_INSTRUMENT) --drop-unused-functions $< $@ \
		2>&1 | tee $(ENTRY)6.log

$(ENTRY)7.goto: $(ENTRY)6.goto
	$(GOTO_INSTRUMENT) --slice-global-inits $< $@ \
		2>&1 | tee $(ENTRY)7.log

$(ENTRY).goto: $(ENTRY)7.goto
	cp $< $@

# Catch-all used for building goto-binaries of the individual
# dependencies, which are then linked in the $(ENTRY)0.goto rule above
%.goto: %.c
	$(GOTO_CC) -c $< --export-function-local-symbols $(CBMC_VERBOSITY) \
	  $(INC) $(DEFINES) -o $@ \
	  2>&1 | tee $(dir $<)/$(notdir $<).log


goto: $(ENTRY).goto

cbmc.log: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --trace $< 2>&1 | tee $@

property.xml: $(ENTRY).goto
	cbmc $(CBMCFLAGS) --show-properties --xml-ui $< 2>&1 > $@

coverage.xml: $(ENTRY).goto
	cbmc $(filter-out --unwinding-assertions,$(CBMCFLAGS)) --cover location --xml-ui $< 2>&1 > $@

cbmc: cbmc.log

property: property.xml

coverage: coverage.xml

report: cbmc.log property.xml coverage.xml
	$(VIEWER) \
	--goto $(ENTRY).goto \
	--srcdir $(SRCDIR) \
	--htmldir html \
	--srcexclude "(./verification|./tests|./tools|./lib/third_party)" \
	--result cbmc.log \
	--property property.xml \
	--block coverage.xml

clean:
	$(RM) $(ENTRY).goto $(ENTRY)[0-7].goto
	$(RM) $(ENTRY)[0-7].log $(ENTRY).log
	$(RM) cbmc.log property.xml coverage.xml TAGS
	$(RM) *~ \#*

veryclean: clean
	$(RM) -r html

.PHONY: cbmc property coverage report clean veryclean batch-yaml ci-yaml

################################################################
# Launching cbmc on cbmc-batch
BATCH ?= cbmc-batch

BATCHFLAGS ?= \
  --bucket $(BUCKET) \
	--srcdir $(SRCDIR) \
	--wsdir $(WS) \
	--jobprefix $(ENTRY) \
	--no-build \
	--goto $(ENTRY).goto \
	--cbmcflags $(call encode_options,$(CBMCFLAGS)) \
	--property-memory $(PROPMEM) \
	--coverage-memory $(COVMEM) \
	--cbmcpkg $(CBMCPKG) \
	--batchpkg $(BATCHPKG) \
	--viewerpkg $(VIEWERPKG) \
	--no-copysrc \
	--blddir $(SRCDIR) \

BATCHPKG ?= cbmc-batch.tar.gz
BUCKET ?= cbmc
CBMCPKG ?= cbmc.tar.gz
COVMEM ?= 64000

define encode_options
       '=$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')='
endef

PROPMEM ?= 64000
VIEWERPKG ?= cbmc-viewer.tar.gz
WS ?= ws

define yaml_encode_options
       "$(shell echo $(1) | sed 's/ ,/ /g' | sed 's/ /;/g')"
endef

$(ENTRY).yaml: $(ENTRY).goto Makefile
	echo 'jobos: ubuntu16' > $@
	echo 'cbmcpkg: $(CBMCPKG)' >> $@
	echo 'batchpkg: $(BATCHPKG)' >> $@
	echo 'viewerpkg: $(VIEWERPKG)' >> $@
	echo 'goto: $(ENTRY).goto' >> $@
	echo 'build: true' >> $@
	echo 'cbmcflags: $(call yaml_encode_options,$(CBMCFLAGS))' >> $@
	echo 'property_memory: $(PROPMEM)' >> $@
	echo 'coverage_memory: $(COVMEM)' >> $@
	echo 'expected: "SUCCESSFUL"' >> $@

batch-yaml: $(ENTRY).yaml

cbmc-batch.yaml: $(ENTRY).goto Makefile
	echo 'jobos: ubuntu16' > $@
	echo 'cbmcflags: $(strip $(call yaml_encode_options,$(CBMCFLAGS)))' >> $@
	echo 'goto: $(ENTRY).goto' >> $@
	echo 'expected: "SUCCESSFUL"' >> $@

ci-yaml: cbmc-batch.yaml

launch: $(ENTRY).goto Makefile
	mkdir -p $(WS)
	cp $(ENTRY).goto $(WS)
	$(BATCH) $(BATCHFLAGS)

launch-clean:
	for d in $(ENTRY)*; do \
	  if [ -d $$d ]; then \
	    for f in $$d.json $$d.yaml Makefile-$$d; do \
	      if [ -f $$f ]; then mv $$f $$d; fi \
	    done\
	  fi \
	done
	$(RM) Makefile-$(ENTRY)-[0-7]*-[0-7]*
	$(RM) $(ENTRY)-[0-7]*-[0-7]*.json $(ENTRY)-[0-7]*-[0-7]*.yaml
	$(RM) -r $(WS)

launch-veryclean: launch-clean
	$(RM) -r $(ENTRY)-[0-7]*-[0-7]*
