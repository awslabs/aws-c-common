name: CI

on:
  push:
    branches-ignore:
      - 'main'

env:
  BUILDER_VERSION: v0.9.49
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  BUILDER_SOURCE: releases
  PACKAGE_NAME: aws-c-common
  LINUX_BASE_IMAGE: ubuntu-18-x64
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  linux-compat:
    runs-on: ubuntu-20.04 # latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - manylinux1-x64
          - manylinux1-x86
          - manylinux2014-x64
          - manylinux2014-x86
          - raspbian-bullseye
          - fedora-34-x64
          - opensuse-leap
          - rhel8-x64
          - al2-x64
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}

  linux-compiler-compat:
    runs-on: ubuntu-20.04 # latest
    strategy:
      matrix:
        compiler:
          - clang-3
          - clang-6
          - clang-8
          - clang-9
          - clang-10
          - clang-11
          - gcc-4.8
          - gcc-5
          - gcc-6
          - gcc-7
          - gcc-8
          - gcc-11
    steps:
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}

  # Test downstream repos.
  # This should not be required because we can run into a chicken and egg problem if there is a change that needs some fix in a downstream repo.
  downstream:
    runs-on: ubuntu-22.04 # latest
    steps:
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}

  clang-sanitizers:
    runs-on: ubuntu-20.04 # latest
    strategy:
      matrix:
        sanitizers: [",thread", ",address,undefined"]
    steps:
      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS="${{ matrix.sanitizers }}"

  linux-shared-libs:
    runs-on: ubuntu-20.04 # latest
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON

  linux-no-cpu-extensions:
    runs-on: ubuntu-20.04 # latest
    steps:
        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF

  windows:
    runs-on: windows-2022 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }}

  windows-vc16:
    runs-on: windows-2022 # latest
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-16

  windows-vc15:
    runs-on: windows-2022 # latest
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-15

  windows-vc14:
    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)
    strategy:
      matrix:
        arch: [x86, x64]
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14

  windows-shared-libs:
    runs-on: windows-2022 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON

  windows-no-cpu-extensions:
    runs-on: windows-2022 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF

  windows-app-verifier:
    runs-on: windows-2022 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} run_tests=false --cmake-extra=-DBUILD_TESTING=ON
    - name: Run and check AppVerifier
      run: |
        echo "Starting to run AppVerifier on all tests found by CTest"
        python .\aws-c-common\scripts\appverifier_ctest.py --build_directory .\aws-c-common\build\aws-c-common

  osx:
    runs-on: macos-12 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }}

  osx-no-cpu-extensions:
    runs-on: macos-12 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF

  openbsd:
    runs-on: ubuntu-latest  # unit tests hang on macos; use ubuntu instead
    steps:
      - uses: actions/checkout@v3
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        uses: cross-platform-actions/action@v0.20.0
        with:
          operating_system: openbsd
          version: '7.2'
          shell: bash
          run: |
            sudo pkg_add py3-urllib3
            python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')"
            chmod a+x builder
            ./builder build -p ${{ env.PACKAGE_NAME }}

  freebsd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        uses: cross-platform-actions/action@v0.20.0
        with:
          operating_system: freebsd
          version: '13.2'
          run: |
            sudo pkg install -y python3 py39-urllib3 py39-pip cmake
            python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')"
            chmod a+x builder
            ./builder build -p ${{ env.PACKAGE_NAME }}

  cross_compile:
    name: Cross Compile ${{matrix.arch}}
    runs-on: ubuntu-20.04 # latest
    strategy:
      matrix:
        arch: [linux-armv6, linux-armv7, linux-arm64, android-armv7]

    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --target=${{matrix.arch}}

  linux-debug:
    runs-on: ubuntu-20.04 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug

  windows-debug:
    runs-on: windows-2022 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --config Debug

  osx-debug:
    runs-on: macos-12 # latest
    steps:
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug
